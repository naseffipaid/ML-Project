name: Deploy to EC2 via ECR

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: eu-north-1
  ECR_ACCOUNT_ID: 585008067217                # <-- numeric account id (12 digits)
  ECR_REGISTRY: 585008067217.dkr.ecr.eu-north-1.amazonaws.com
  IMAGE_NAME: studentperformance1
  CONTAINER_NAME: studentperformance1
  CONTAINER_PORT: 8080

jobs:
  deploy:
    name: Build, Push & Run on EC2
    runs-on: self-hosted   # your EC2 self-hosted runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Ensure Docker is installed (attempt)
      shell: bash
      run: |
        if ! command -v docker >/dev/null 2>&1; then
          echo "Docker not found — attempting to install docker..."
          sudo apt-get update -y
          sudo apt-get install -y docker.io
          sudo systemctl enable docker
          sudo systemctl start docker
          sudo usermod -aG docker $USER || true
        else
          echo "Docker already installed: $(docker --version)"
        fi
        docker info >/dev/null || (echo "docker not usable (permissions). Ensure runner user is in docker group or run as root." && exit 1)

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Ensure ECR repository exists
      shell: bash
      run: |
        if ! aws ecr describe-repositories --repository-names "${IMAGE_NAME}" >/dev/null 2>&1; then
          echo "ECR repo ${IMAGE_NAME} not found — creating..."
          aws ecr create-repository --repository-name "${IMAGE_NAME}" >/dev/null
        else
          echo "ECR repo ${IMAGE_NAME} exists"
        fi

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registries: ${{ env.ECR_ACCOUNT_ID }}
        mask-password: true

    - name: Build Docker image
      run: |
        docker build -t ${IMAGE_NAME}:latest .
        docker tag ${IMAGE_NAME}:latest ${ECR_REGISTRY}/${IMAGE_NAME}:latest

    - name: Push Docker image to ECR
      run: |
        docker push ${ECR_REGISTRY}/${IMAGE_NAME}:latest

    - name: Stop old container if exists
      run: |
        if docker ps -a -q -f name=${CONTAINER_NAME} | grep -q .; then
          echo "Stopping and removing old container ${CONTAINER_NAME}"
          docker stop ${CONTAINER_NAME} || true
          docker rm ${CONTAINER_NAME} || true
        else
          echo "No existing container named ${CONTAINER_NAME}"
        fi

    - name: Run Docker container
      run: |
        docker run -d \
          --name ${CONTAINER_NAME} \
          -p ${CONTAINER_PORT}:${CONTAINER_PORT} \
          --restart unless-stopped \
          ${ECR_REGISTRY}/${IMAGE_NAME}:latest

    - name: Show container status
      run: |
        docker ps --filter "name=${CONTAINER_NAME}" --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"

